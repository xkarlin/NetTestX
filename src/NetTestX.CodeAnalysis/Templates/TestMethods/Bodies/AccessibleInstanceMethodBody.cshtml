@using Microsoft.CodeAnalysis
@using NetTestX.Razor
@using NetTestX.CodeAnalysis.Templates.TestMethods.Bodies
@using static NetTestX.CodeAnalysis.Templates.Utils.RazorTemplateHelpers
@inherits RazorPage<AccessibleInstanceMethodBodyModel>
// Arrange
@foreach (var param in Model.Constructor.Parameters)
{
@:var @param.Name = @Model.Parent.Parent.Value(param.Type);
}
@Short(Model.Type) sut = new(@Args(Model.Constructor));

@foreach (var param in Model.Method.Parameters)
{
@:var @TestPascal(param.Name) = @Model.Parent.Parent.Value(param.Type);
}

// Act
@if (Model.Method.ReturnsVoid)
{
@:sut.@(Model.Method.Name)(@Args(Model.Method, TestPascal));
}
else if (Model.Method is { IsAsync: true, ReturnType: INamedTypeSymbol { IsGenericType: true } })
{
@:var result = await sut.@(Model.Method.Name)(@Args(Model.Method, TestPascal));
}
else if (Model.Method.IsAsync)
{
@:await sut.@(Model.Method.Name)(@Args(Model.Method, TestPascal));
}
else
{
@:var result = sut.@(Model.Method.Name)(@Args(Model.Method, TestPascal));
}

// Assert
